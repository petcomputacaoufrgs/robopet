/*
	Lua bindings for class Vector
	This file was automatically generated by cpptolua

*/

#include "./vector_userdata.h"
#include <new>

int Vector_new(lua_State* L)
{
	size_t size = sizeof(Vector);
	Vector *p = (Vector*) lua_newuserdata(L, size);
	new (p) Vector();
	luaL_getmetatable(L, "Vector");
	lua_setmetatable(L, -2);
	return 1;
}

int Vector_gc(lua_State* L)
{
	Vector *p = (Vector*) lua_touserdata(L,1);
	if (p) delete p;
	return 0;
}

int Vector_projection(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	copyVector(L, &c->projection(*just_a_Vector_0));
	return 1;
}

int Vector_perpendicular(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	lua_pushboolean(L, c->perpendicular(*just_a_Vector_0));
	return 1;
}

int Vector_angleClockwise(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->angleClockwise());
	return 1;
}

int Vector_angleDegrees(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	lua_pushnumber(L, c->angleDegrees(*just_a_Vector_0));
	return 1;
}

int Vector_angle(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	lua_pushnumber(L, c->angle(*just_a_Vector_0));
	return 1;
}

int Vector_rotate(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->rotate(just_a_double_0);
	return 0;
}

int Vector_dotProduct(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	lua_pushnumber(L, c->dotProduct(*just_a_Vector_0));
	return 1;
}

int Vector_linearlyDependent(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	lua_pushboolean(L, c->linearlyDependent(*just_a_Vector_0));
	return 1;
}

int Vector_normalizeMe(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	copyVector(L, &c->normalizeMe());
	return 1;
}

int Vector_normalize(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	copyVector(L, &c->normalize());
	return 1;
}

int Vector_getNorm(lua_State* L)
{
	Vector *c = (Vector*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getNorm());
	return 1;
}

const struct luaL_reg Vectorlib [] = {
	{"new", Vector_new },
	{NULL,NULL}
};

static const luaL_reg Vector_meta[] = {
	{ "projection" , Vector_projection },
	{ "perpendicular" , Vector_perpendicular },
	{ "angleClockwise" , Vector_angleClockwise },
	{ "angleDegrees" , Vector_angleDegrees },
	{ "angle" , Vector_angle },
	{ "rotate" , Vector_rotate },
	{ "dotProduct" , Vector_dotProduct },
	{ "linearlyDependent" , Vector_linearlyDependent },
	{ "normalizeMe" , Vector_normalizeMe },
	{ "normalize" , Vector_normalize },
	{ "getNorm" , Vector_getNorm },
	{"__gc", Vector_gc },
	{NULL,NULL}
};

Vector* toVector(lua_State *L, int index)
{
	Vector *p = (Vector*) lua_touserdata(L,index);
	if (p == NULL) luaL_typerror(L,index,"Vector");
	return p;
}

Vector* checkVector(lua_State *L, int index)
{
	Vector *p;
	luaL_checktype(L, index, LUA_TUSERDATA);
	p = (Vector*) luaL_checkudata(L, index, "Vector");
	if (p == NULL) luaL_typerror(L, index, "Vector");
	return p;
}

int copyVector(lua_State *L, Vector *p)
{
	Vector_new(L);
	*((Vector*)lua_touserdata(L,-1)) = *(p);
	return 1;
}

int luaopen_Vector(lua_State *L)
{
	luaL_newmetatable(L, "Vector");
	luaL_getmetatable(L,"Point");
	lua_pushstring(L, "__index");
	lua_pushvalue(L, -2);
	lua_settable(L, -4);
	luaL_register(L, NULL, Vector_meta);
	luaL_register(L, "Vector", Vectorlib);
	return 1;
}
