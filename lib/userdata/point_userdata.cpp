/*
	Lua bindings for class Point
	This file was automatically generated by cpptolua

*/

#include "./point_userdata.h"
#include <new>

int Point_getDistanceY(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	lua_pushnumber(L, c->getDistanceY(*just_a_Point_0));
	return 1;
}

int Point_getDistanceX(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	lua_pushnumber(L, c->getDistanceX(*just_a_Point_0));
	return 1;
}

int Point_getDistance(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	lua_pushnumber(L, c->getDistance(*just_a_Point_0));
	return 1;
}

int Point_setXY(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	double just_a_double_1 = luaL_checknumber(L, 3);
	c->setXY(just_a_double_0, just_a_double_1);
	return 0;
}

int Point_setY(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setY(just_a_double_0);
	return 0;
}

int Point_setX(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setX(just_a_double_0);
	return 0;
}

int Point_getY(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getY());
	return 1;
}

int Point_getX(lua_State* L)
{
	Point *c = (Point*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getX());
	return 1;
}

int Point_new(lua_State* L)
{
	size_t size = sizeof(Point);
	Point *p = (Point*) lua_newuserdata(L, size);
	new (p) Point();
	luaL_getmetatable(L, "Point");
	lua_setmetatable(L, -2);
	return 1;
}

int Point_gc(lua_State* L)
{
	Point *p = (Point*) lua_touserdata(L,1);
	if (p) delete p;
	return 0;
}

const struct luaL_reg Pointlib [] = {
	{"new", Point_new },
	{NULL,NULL}
};

static const luaL_reg Point_meta[] = {
	{ "getDistanceY" , Point_getDistanceY },
	{ "getDistanceX" , Point_getDistanceX },
	{ "getDistance" , Point_getDistance },
	{ "setXY" , Point_setXY },
	{ "setXY" , Point_setXY },
	{ "setY" , Point_setY },
	{ "setX" , Point_setX },
	{ "getY" , Point_getY },
	{ "getX" , Point_getX },
	{"__gc", Point_gc },
	{NULL,NULL}
};

Point* toPoint(lua_State *L, int index)
{
	Point *p = (Point*) lua_touserdata(L,index);
	if (p == NULL) luaL_typerror(L,index,"Point");
	return p;
}

Point* checkPoint(lua_State *L, int index)
{
	Point *p;
	luaL_checktype(L, index, LUA_TUSERDATA);
	p = (Point*) luaL_checkudata(L, index, "Point");
	if (p == NULL) luaL_typerror(L, index, "Point");
	return p;
}

int copyPoint(lua_State *L, Point *p)
{
	Point_new(L);
	*((Point*)lua_touserdata(L,-1)) = *(p);
	return 1;
}

int luaopen_Point(lua_State *L)
{
	luaL_newmetatable(L, "Point");
	lua_pushstring(L, "__index");
	lua_pushvalue(L, -2);
	lua_settable(L, -3);
	luaL_register(L, NULL, Point_meta);
	luaL_register(L, "Point", Pointlib);
	return 1;
}
