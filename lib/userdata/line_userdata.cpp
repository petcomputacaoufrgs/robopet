/*
	Lua bindings for class Line
	This file was automatically generated by cpptolua

*/

#include "./point_userdata.h"
#include "./vector_userdata.h"
#include "./line_userdata.h"
#include <new>

int Line_new(lua_State* L)
{
	size_t size = sizeof(Line);
	Line *p = (Line*) lua_newuserdata(L, size);
	new (p) Line();
	luaL_getmetatable(L, "Line");
	lua_setmetatable(L, -2);
	return 1;
}

//int Line_distance(lua_State* L)
//{
//	Line *c = (Line*) lua_touserdata(L, 1);
//	Line *just_a_Line_0 = checkLine(L, 2);
//	lua_pushnumber(L, c->distance(*just_a_Line_0));
//	return 1;
//}

int Line_distance(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	lua_pushnumber(L, c->distance(*just_a_Point_0));
	return 1;
}

int Line_preImage(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	lua_pushnumber(L, c->preImage(just_a_double_0));
	return 1;
}

int Line_image(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	lua_pushnumber(L, c->image(just_a_double_0));
	return 1;
}

int Line_horizontal(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	lua_pushboolean(L, c->horizontal());
	return 1;
}

int Line_vertical(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	lua_pushboolean(L, c->vertical());
	return 1;
}

int Line_contains(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	lua_pushboolean(L, c->contains(*just_a_Point_0));
	return 1;
}

int Line_perpendicular(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Line *just_a_Line_0 = checkLine(L, 2);
	lua_pushboolean(L, c->perpendicular(*just_a_Line_0));
	return 1;
}

int Line_angle(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Line *just_a_Line_0 = checkLine(L, 2);
	lua_pushnumber(L, c->angle(*just_a_Line_0));
	return 1;
}

int Line_parallel(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Line *just_a_Line_0 = checkLine(L, 2);
	lua_pushboolean(L, c->parallel(*just_a_Line_0));
	return 1;
}

int Line_intersection(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Line *just_a_Line_0 = checkLine(L, 2);
	copyPoint(L, &c->intersection(*just_a_Line_0));
	return 1;
}

int Line_intersects(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Line *just_a_Line_0 = checkLine(L, 2);
	lua_pushboolean(L, c->intersects(*just_a_Line_0));
	return 1;
}

int Line_setLinearCoefficient(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setLinearCoefficient(just_a_double_0);
	return 0;
}

int Line_setAngularCoefficient(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setAngularCoefficient(just_a_double_0);
	return 0;
}

int Line_setPoint(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	c->setPoint(*just_a_Point_0);
	return 0;
}

int Line_setVector(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	c->setVector(*just_a_Vector_0);
	return 0;
}

int Line_getLinearCoefficient(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getLinearCoefficient());
	return 1;
}

int Line_getAngularCoefficient(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getAngularCoefficient());
	return 1;
}

int Line_getPoint(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	copyPoint(L, &c->getPoint());
	return 1;
}

int Line_getVector(lua_State* L)
{
	Line *c = (Line*) lua_touserdata(L, 1);
	copyVector(L, &c->getVector());
	return 1;
}


int Line_gc(lua_State* L)
{
	Line *p = (Line*) lua_touserdata(L,1);
	if (p) delete p;
	return 0;
}

const struct luaL_reg Linelib [] = {
	{"new", Line_new },
	{NULL,NULL}
};

static const luaL_reg Line_meta[] = {
	{ "distance" , Line_distance },
	{ "distance" , Line_distance },
	{ "preImage" , Line_preImage },
	{ "image" , Line_image },
	{ "horizontal" , Line_horizontal },
	{ "vertical" , Line_vertical },
	{ "contains" , Line_contains },
	{ "perpendicular" , Line_perpendicular },
	{ "angle" , Line_angle },
	{ "parallel" , Line_parallel },
	{ "intersection" , Line_intersection },
	{ "intersects" , Line_intersects },
	{ "setLinearCoefficient" , Line_setLinearCoefficient },
	{ "setAngularCoefficient" , Line_setAngularCoefficient },
	{ "setPoint" , Line_setPoint },
	{ "setVector" , Line_setVector },
	{ "getLinearCoefficient" , Line_getLinearCoefficient },
	{ "getAngularCoefficient" , Line_getAngularCoefficient },
	{ "getPoint" , Line_getPoint },
	{ "getVector" , Line_getVector },
	{"__gc", Line_gc },
	{NULL,NULL}
};

Line* toLine(lua_State *L, int index)
{
	Line *p = (Line*) lua_touserdata(L,index);
	if (p == NULL) luaL_typerror(L,index,"Line");
	return p;
}

Line* checkLine(lua_State *L, int index)
{
	Line *p;
	luaL_checktype(L, index, LUA_TUSERDATA);
	p = (Line*) luaL_checkudata(L, index, "Line");
	if (p == NULL) luaL_typerror(L, index, "Line");
	return p;
}

int copyLine(lua_State *L, Line *p)
{
	Line_new(L);
	*((Line*)lua_touserdata(L,-1)) = *(p);
	return 1;
}

int luaopen_Line(lua_State *L)
{
	luaL_newmetatable(L, "Line");
	lua_pushstring(L, "__index");
	lua_pushvalue(L, -2);
	lua_settable(L, -3);
	luaL_register(L, NULL, Line_meta);
	luaL_register(L, "Line", Linelib);
	return 1;
}
