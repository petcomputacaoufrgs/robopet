/*
	Lua bindings for class Player
	This file was automatically generated by cpptolua

*/

#include "player_userdata.h"
#include <new>

int Player_stay(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	c->stay();
	return 0;
}

int Player_isKicking(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushboolean(L, c->isKicking());
	return 1;
}

int Player_isDribling(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushboolean(L, c->isDribling());
	return 1;
}

int Player_calcDeltaAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->calcDeltaAngle());
	return 1;
}

int Player_setId(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	int just_a_int_0 = luaL_checknumber(L, 2);
	c->setId(just_a_int_0);
	return 0;
}

int Player_setKickerIntensity(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	int just_a_int_0 = luaL_checknumber(L, 2);
	c->setKickerIntensity(just_a_int_0);
	return 0;
}

int Player_setDriblerIntensity(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	int just_a_int_0 = luaL_checknumber(L, 2);
	c->setDriblerIntensity(just_a_int_0);
	return 0;
}

int Player_setDisplacementWithBall(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setDisplacementWithBall(just_a_double_0);
	return 0;
}

int Player_setRole(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	int just_a_int_0 = luaL_checknumber(L, 2);
	c->setRole(just_a_int_0);
	return 0;
}

int Player_setAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setAngle(just_a_double_0);
	return 0;
}

int Player_setDeltaAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setDeltaAngle(just_a_double_0);
	return 0;
}

int Player_setFutureAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setFutureAngle(just_a_double_0);
	return 0;
}

int Player_setCurrentAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setCurrentAngle(just_a_double_0);
	return 0;
}

int Player_getId(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getId());
	return 1;
}

int Player_getKickerIntensity(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getKickerIntensity());
	return 1;
}

int Player_getDriblerIntensity(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getDriblerIntensity());
	return 1;
}

int Player_getDisplacementWithBall(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getDisplacementWithBall());
	return 1;
}

int Player_getRole(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getRole());
	return 1;
}

int Player_getAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getAngle());
	return 1;
}

int Player_getDeltaAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getDeltaAngle());
	return 1;
}

int Player_getFutureAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getFutureAngle());
	return 1;
}

int Player_getCurrentAngle(lua_State* L)
{
	Player *c = (Player*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getCurrentAngle());
	return 1;
}

int Player_new(lua_State* L)
{
	size_t size = sizeof(Player);
	Player *p = (Player*) lua_newuserdata(L, size);
	new (p) Player();
	luaL_getmetatable(L, "Player");
	lua_setmetatable(L, -2);
	return 1;
}
int Player_gc(lua_State* L)
{
	Player *p = (Player*) lua_touserdata(L,1);
	if (p) delete p;
	return 0;
}

const struct luaL_reg Playerlib [] = {
	{"new", Player_new },
	{NULL,NULL}
};

static const luaL_reg Player_meta[] = {
	{ "stay" , Player_stay },
	{ "isKicking" , Player_isKicking },
	{ "isDribling" , Player_isDribling },
	{ "calcDeltaAngle" , Player_calcDeltaAngle },
	{ "setId" , Player_setId },
	{ "setKickerIntensity" , Player_setKickerIntensity },
	{ "setDriblerIntensity" , Player_setDriblerIntensity },
	{ "setDisplacementWithBall" , Player_setDisplacementWithBall },
	{ "setRole" , Player_setRole },
	{ "setAngle" , Player_setAngle },
	{ "setDeltaAngle" , Player_setDeltaAngle },
	{ "setFutureAngle" , Player_setFutureAngle },
	{ "setCurrentAngle" , Player_setCurrentAngle },
	{ "getId" , Player_getId },
	{ "getKickerIntensity" , Player_getKickerIntensity },
	{ "getDriblerIntensity" , Player_getDriblerIntensity },
	{ "getDisplacementWithBall" , Player_getDisplacementWithBall },
	{ "getRole" , Player_getRole },
	{ "getAngle" , Player_getAngle },
	{ "getDeltaAngle" , Player_getDeltaAngle },
	{ "getFutureAngle" , Player_getFutureAngle },
	{ "getCurrentAngle" , Player_getCurrentAngle },
	{"__gc", Player_gc },
	{NULL,NULL}
};

Player* toPlayer(lua_State *L, int index)
{
	Player *p = (Player*) lua_touserdata(L,index);
	if (p == NULL) luaL_typerror(L,index,"Player");
	return p;
}

Player* checkPlayer(lua_State *L, int index)
{
	Player *p;
	luaL_checktype(L, index, LUA_TUSERDATA);
	p = (Player*) luaL_checkudata(L, index, "Player");
	if (p == NULL) luaL_typerror(L, index, "Player");
	return p;
}

int copyPlayer(lua_State *L, Player *p)
{
	Player_new(L);
	*((Player*)lua_touserdata(L,-1)) = *(p);
	return 1;
}

int luaopen_Player(lua_State *L)
{
	luaL_newmetatable(L, "Player");
	luaL_getmetatable(L,"MovingObject");
	lua_pushstring(L, "__index");
	lua_pushvalue(L, -2);
	lua_settable(L, -4);
	luaL_register(L, NULL, Player_meta);
	luaL_register(L, "Player", Playerlib);
	return 1;
}
