/*
	Lua bindings for class PhysicsRobot
	This file was automatically generated by cpptolua

*/

#include "./physicsRobot_userdata.h"
#include "./vector_userdata.h"
#include <new>

int PhysicsRobot_new(lua_State* L)
{
	size_t size = sizeof(PhysicsRobot);
	PhysicsRobot *p = (PhysicsRobot*) lua_newuserdata(L, size);
	new (p) PhysicsRobot();
	luaL_getmetatable(L, "PhysicsRobot");
	lua_setmetatable(L, -2);
	return 1;
}

int PhysicsRobot_getAngle(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getAngle());
	return 1;
}

int PhysicsRobot_update(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	c->update();
	return 0;
}

int PhysicsRobot_stop(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	c->stop();
	return 0;
}

int PhysicsRobot_move(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	int just_a_char_0 = luaL_checknumber(L, 2);
	Vector *just_a_Vector_1 = checkVector(L, 3);
	c->move(just_a_char_0, *just_a_Vector_1);
	return 0;
}

int PhysicsRobot_rotate(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	int just_a_int_0 = luaL_checknumber(L, 2);
	c->rotate(just_a_int_0);
	return 0;
}

int PhysicsRobot_go(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	Vector *just_a_Vector_0 = checkVector(L, 2);
	c->go(*just_a_Vector_0);
	return 0;
}

int PhysicsRobot_fakeMove(lua_State* L)
{
	PhysicsRobot *c = (PhysicsRobot*) lua_touserdata(L, 1);
	float just_a_float_0 = luaL_checknumber(L, 2);
	bool just_a_bool_1 = lua_toboolean(L, 3);
	int just_a_char_2 = luaL_checknumber(L, 4);
	int just_a_int_3 = luaL_checknumber(L, 5);
	Vector *just_a_Vector_4 = checkVector(L, 6);
	copyPhysicsRobot(L, &c->fakeMove(just_a_float_0, just_a_bool_1, just_a_char_2, just_a_int_3, *just_a_Vector_4));
	return 1;
}

const struct luaL_reg PhysicsRobotlib [] = {
	{"new", PhysicsRobot_new },
	{NULL,NULL}
};

int PhysicsRobot_gc(lua_State* L)
{
	PhysicsRobot *p = (PhysicsRobot*) lua_touserdata(L,1);
	if (p) delete p;
	return 0;
}


static const luaL_reg PhysicsRobot_meta[] = {
	{ "getAngle" , PhysicsRobot_getAngle },
	{ "update" , PhysicsRobot_update },
	{ "stop" , PhysicsRobot_stop },
	{ "move" , PhysicsRobot_move },
	{ "rotate" , PhysicsRobot_rotate },
	{ "go" , PhysicsRobot_go },
	{ "fakeMove" , PhysicsRobot_fakeMove },
	{"__gc", PhysicsRobot_gc },
	{NULL,NULL}
};

PhysicsRobot* toPhysicsRobot(lua_State *L, int index)
{
	PhysicsRobot *p = (PhysicsRobot*) lua_touserdata(L,index);
	if (p == NULL) luaL_typerror(L,index,"PhysicsRobot");
	return p;
}

PhysicsRobot* checkPhysicsRobot(lua_State *L, int index)
{
	PhysicsRobot *p;
	luaL_checktype(L, index, LUA_TUSERDATA);
	p = (PhysicsRobot*) luaL_checkudata(L, index, "PhysicsRobot");
	if (p == NULL) luaL_typerror(L, index, "PhysicsRobot");
	return p;
}

int copyPhysicsRobot(lua_State *L, PhysicsRobot *p)
{
	PhysicsRobot_new(L);
	*((PhysicsRobot*)lua_touserdata(L,-1)) = *(p);
	return 1;
}

int luaopen_PhysicsRobot(lua_State *L)
{
	luaL_newmetatable(L, "PhysicsRobot");
	lua_pushstring(L, "__index");
	lua_pushvalue(L, -2);
	lua_settable(L, -3);
	luaL_register(L, NULL, PhysicsRobot_meta);
	luaL_register(L, "PhysicsRobot", PhysicsRobotlib);
	return 1;
}
