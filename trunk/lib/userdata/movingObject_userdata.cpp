/*
	Lua bindings for class MovingObject
	This file was automatically generated by cpptolua

*/

#include "./movingObject_userdata.h"
#include <new>

int MovingObject_getDistance(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	MovingObject& *just_a_MovingObject&) = checkMovingObject&(L, 2);
	lua_pushnumber(L, c->getDistance(just_a_MovingObject&)));
	return 1;
}

int MovingObject_calculateDisplacement(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	c->calculateDisplacement();
	return 0;
}

int MovingObject_calcDisplacementVector(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	copyVector(L, &c->calcDisplacementVector());
	return 1;
}

int MovingObject_setDisplacement(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setDisplacement(just_a_double_0);
	return 0;
}

int MovingObject_setFuturePositionY(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setFuturePositionY(just_a_double_0);
	return 0;
}

int MovingObject_setFuturePositionX(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setFuturePositionX(just_a_double_0);
	return 0;
}

int MovingObject_setFuturePosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	double just_a_double_1 = luaL_checknumber(L, 3);
	c->setFuturePosition(just_a_double_0, just_a_double_1);
	return 0;
}

int MovingObject_setFuturePosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	c->setFuturePosition(just_a_Point_0);
	return 0;
}

int MovingObject_setPastPositionY(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setPastPositionY(just_a_double_0);
	return 0;
}

int MovingObject_setPastPositionX(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setPastPositionX(just_a_double_0);
	return 0;
}

int MovingObject_setPastPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	double just_a_double_1 = luaL_checknumber(L, 3);
	c->setPastPosition(just_a_double_0, just_a_double_1);
	return 0;
}

int MovingObject_setPastPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	c->setPastPosition(just_a_Point_0);
	return 0;
}

int MovingObject_getY(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getY());
	return 1;
}

int MovingObject_getX(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getX());
	return 1;
}

int MovingObject_setY(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setY(just_a_double_0);
	return 0;
}

int MovingObject_setX(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setX(just_a_double_0);
	return 0;
}

int MovingObject_setCurrentPositionY(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setCurrentPositionY(just_a_double_0);
	return 0;
}

int MovingObject_setCurrentPositionX(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	c->setCurrentPositionX(just_a_double_0);
	return 0;
}

int MovingObject_setCurrentPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	double just_a_double_0 = luaL_checknumber(L, 2);
	double just_a_double_1 = luaL_checknumber(L, 3);
	c->setCurrentPosition(just_a_double_0, just_a_double_1);
	return 0;
}

int MovingObject_setCurrentPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	Point *just_a_Point_0 = checkPoint(L, 2);
	c->setCurrentPosition(just_a_Point_0);
	return 0;
}

int MovingObject_getPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	copyPoint&(L, &c->getPosition());
	return 1;
}

int MovingObject_getDisplacement(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	lua_pushnumber(L, c->getDisplacement());
	return 1;
}

int MovingObject_getFuturePosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	copyPoint&(L, &c->getFuturePosition());
	return 1;
}

int MovingObject_getPastPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	copyPoint&(L, &c->getPastPosition());
	return 1;
}

int MovingObject_getCurrentPosition(lua_State* L)
{
	MovingObject *c = (MovingObject*) lua_touserdata(L, 1);
	copyPoint&(L, &c->getCurrentPosition());
	return 1;
}

int MovingObject_new(lua_State* L)
{
	size_t size = sizeof(MovingObject);
	MovingObject *p = (MovingObject*) lua_newuserdata(L, size);
	new (p) MovingObject();
	luaL_getmetatable(L, "MovingObject");
	lua_setmetatable(L, -2);
	return 1;
}
int MovingObject_gc(lua_State* L)
{
	MovingObject *p = (MovingObject*) lua_touserdata(L,1);
	if (p) delete p;
	return 0;
}

const struct luaL_reg MovingObjectlib [] = {
	{"new", MovingObject_new },
	{NULL,NULL}
};

static const luaL_reg MovingObject_meta[] = {
	{ "getDistance" , MovingObject_getDistance },
	{ "calculateDisplacement" , MovingObject_calculateDisplacement },
	{ "calcDisplacementVector" , MovingObject_calcDisplacementVector },
	{ "setDisplacement" , MovingObject_setDisplacement },
	{ "setFuturePositionY" , MovingObject_setFuturePositionY },
	{ "setFuturePositionX" , MovingObject_setFuturePositionX },
	{ "setFuturePosition" , MovingObject_setFuturePosition },
	{ "setFuturePosition" , MovingObject_setFuturePosition },
	{ "setPastPositionY" , MovingObject_setPastPositionY },
	{ "setPastPositionX" , MovingObject_setPastPositionX },
	{ "setPastPosition" , MovingObject_setPastPosition },
	{ "setPastPosition" , MovingObject_setPastPosition },
	{ "getY" , MovingObject_getY },
	{ "getX" , MovingObject_getX },
	{ "setY" , MovingObject_setY },
	{ "setX" , MovingObject_setX },
	{ "setCurrentPositionY" , MovingObject_setCurrentPositionY },
	{ "setCurrentPositionX" , MovingObject_setCurrentPositionX },
	{ "setCurrentPosition" , MovingObject_setCurrentPosition },
	{ "setCurrentPosition" , MovingObject_setCurrentPosition },
	{ "getPosition" , MovingObject_getPosition },
	{ "getDisplacement" , MovingObject_getDisplacement },
	{ "getFuturePosition" , MovingObject_getFuturePosition },
	{ "getPastPosition" , MovingObject_getPastPosition },
	{ "getCurrentPosition" , MovingObject_getCurrentPosition },
	{"__gc", MovingObject_gc },
	{NULL,NULL}
};

MovingObject* toMovingObject(lua_State *L, int index)
{
	MovingObject *p = (MovingObject*) lua_touserdata(L,index);
	if (p == NULL) luaL_typerror(L,index,"MovingObject");
	return p;
}

MovingObject* checkMovingObject(lua_State *L, int index)
{
	MovingObject *p;
	luaL_checktype(L, index, LUA_TUSERDATA);
	p = (MovingObject*) luaL_checkudata(L, index, "MovingObject");
	if (p == NULL) luaL_typerror(L, index, "MovingObject");
	return p;
}

int copyMovingObject(lua_State *L, MovingObject *p)
{
	MovingObject_new(L);
	*((MovingObject*)lua_touserdata(L,-1)) = *(p);
	return 1;
}

int luaopen_MovingObject(lua_State *L)
{
	luaL_newmetatable(L, "MovingObject");
	lua_pushstring(L, "__index");
	lua_pushvalue(L, -2);
	lua_settable(L, -3);
	luaL_register(L, NULL, MovingObject_meta);
	luaL_register(L, "MovingObject", MovingObjectlib);
	return 1;
}
